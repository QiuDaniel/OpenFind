//
//  StyleKitName.swift
//  ProjectName
//
//  Created by AuthorName on 1/15/20.
//  Copyright Â© 2020 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfShare: UIImage?
        static var shareTargets: [AnyObject]?
        static var imageOfDelete: UIImage?
        static var deleteTargets: [AnyObject]?
        static var imageOfFind: UIImage?
        static var findTargets: [AnyObject]?
        static var imageOfHeartFill: UIImage?
        static var heartFillTargets: [AnyObject]?
        static var imageOfHeart: UIImage?
        static var heartTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawShare(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 256.4, y: 316.54))
        bezierPath.addCurve(to: CGPoint(x: 274.17, y: 298.94), controlPoint1: CGPoint(x: 266.31, y: 316.54), controlPoint2: CGPoint(x: 274.17, y: 308.34))
        bezierPath.addLine(to: CGPoint(x: 274.17, y: 129.58))
        bezierPath.addLine(to: CGPoint(x: 272.63, y: 104.46))
        bezierPath.addLine(to: CGPoint(x: 282.54, y: 117.45))
        bezierPath.addLine(to: CGPoint(x: 304.76, y: 141.2))
        bezierPath.addCurve(to: CGPoint(x: 316.55, y: 146.33), controlPoint1: CGPoint(x: 307.84, y: 144.45), controlPoint2: CGPoint(x: 312.11, y: 146.33))
        bezierPath.addCurve(to: CGPoint(x: 332.28, y: 131.12), controlPoint1: CGPoint(x: 324.93, y: 146.33), controlPoint2: CGPoint(x: 332.28, y: 140.01))
        bezierPath.addCurve(to: CGPoint(x: 327.32, y: 120.01), controlPoint1: CGPoint(x: 332.28, y: 126.68), controlPoint2: CGPoint(x: 330.4, y: 123.26))
        bezierPath.addLine(to: CGPoint(x: 270.24, y: 65.15))
        bezierPath.addCurve(to: CGPoint(x: 256.4, y: 59), controlPoint1: CGPoint(x: 265.63, y: 60.54), controlPoint2: CGPoint(x: 261.01, y: 59))
        bezierPath.addCurve(to: CGPoint(x: 242.38, y: 65.15), controlPoint1: CGPoint(x: 251.61, y: 59), controlPoint2: CGPoint(x: 247, y: 60.54))
        bezierPath.addLine(to: CGPoint(x: 185.3, y: 120.01))
        bezierPath.addCurve(to: CGPoint(x: 180.35, y: 131.12), controlPoint1: CGPoint(x: 182.23, y: 123.26), controlPoint2: CGPoint(x: 180.35, y: 126.68))
        bezierPath.addCurve(to: CGPoint(x: 196.07, y: 146.33), controlPoint1: CGPoint(x: 180.35, y: 140.01), controlPoint2: CGPoint(x: 187.53, y: 146.33))
        bezierPath.addCurve(to: CGPoint(x: 207.86, y: 141.2), controlPoint1: CGPoint(x: 200.51, y: 146.33), controlPoint2: CGPoint(x: 204.79, y: 144.45))
        bezierPath.addLine(to: CGPoint(x: 230.08, y: 117.45))
        bezierPath.addLine(to: CGPoint(x: 239.99, y: 104.46))
        bezierPath.addLine(to: CGPoint(x: 238.45, y: 129.58))
        bezierPath.addLine(to: CGPoint(x: 238.45, y: 298.94))
        bezierPath.addCurve(to: CGPoint(x: 256.4, y: 316.54), controlPoint1: CGPoint(x: 238.45, y: 308.34), controlPoint2: CGPoint(x: 246.49, y: 316.54))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 354.66, y: 454.97))
        bezierPath.addCurve(to: CGPoint(x: 412.94, y: 397.04), controlPoint1: CGPoint(x: 392.77, y: 454.97), controlPoint2: CGPoint(x: 412.94, y: 434.81))
        bezierPath.addLine(to: CGPoint(x: 412.94, y: 231.09))
        bezierPath.addCurve(to: CGPoint(x: 354.66, y: 173.16), controlPoint1: CGPoint(x: 412.94, y: 193.33), controlPoint2: CGPoint(x: 392.77, y: 173.16))
        bezierPath.addLine(to: CGPoint(x: 309.72, y: 173.16))
        bezierPath.addLine(to: CGPoint(x: 309.72, y: 212.3))
        bezierPath.addLine(to: CGPoint(x: 351.08, y: 212.3))
        bezierPath.addCurve(to: CGPoint(x: 373.98, y: 235.37), controlPoint1: CGPoint(x: 365.77, y: 212.3), controlPoint2: CGPoint(x: 373.98, y: 219.82))
        bezierPath.addLine(to: CGPoint(x: 373.98, y: 392.94))
        bezierPath.addCurve(to: CGPoint(x: 351.08, y: 415.84), controlPoint1: CGPoint(x: 373.98, y: 408.32), controlPoint2: CGPoint(x: 365.77, y: 415.84))
        bezierPath.addLine(to: CGPoint(x: 160.87, y: 415.84))
        bezierPath.addCurve(to: CGPoint(x: 138.14, y: 392.94), controlPoint1: CGPoint(x: 146, y: 415.84), controlPoint2: CGPoint(x: 138.14, y: 408.32))
        bezierPath.addLine(to: CGPoint(x: 138.14, y: 235.37))
        bezierPath.addCurve(to: CGPoint(x: 160.87, y: 212.3), controlPoint1: CGPoint(x: 138.14, y: 219.82), controlPoint2: CGPoint(x: 146, y: 212.3))
        bezierPath.addLine(to: CGPoint(x: 202.91, y: 212.3))
        bezierPath.addLine(to: CGPoint(x: 202.91, y: 173.16))
        bezierPath.addLine(to: CGPoint(x: 157.28, y: 173.16))
        bezierPath.addCurve(to: CGPoint(x: 99, y: 231.09), controlPoint1: CGPoint(x: 119.34, y: 173.16), controlPoint2: CGPoint(x: 99, y: 193.33))
        bezierPath.addLine(to: CGPoint(x: 99, y: 397.04))
        bezierPath.addCurve(to: CGPoint(x: 157.28, y: 454.97), controlPoint1: CGPoint(x: 99, y: 434.81), controlPoint2: CGPoint(x: 119.34, y: 454.97))
        bezierPath.addLine(to: CGPoint(x: 354.66, y: 454.97))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 39, y: -1))
        clipPath.addLine(to: CGPoint(x: 472.94, y: -1))
        clipPath.addLine(to: CGPoint(x: 472.94, y: 514.97))
        clipPath.addLine(to: CGPoint(x: 39, y: 514.97))
        clipPath.addLine(to: CGPoint(x: 39, y: -1))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 256.4, y: 316.54))
        clipPath.addCurve(to: CGPoint(x: 274.17, y: 298.94), controlPoint1: CGPoint(x: 266.31, y: 316.54), controlPoint2: CGPoint(x: 274.17, y: 308.34))
        clipPath.addLine(to: CGPoint(x: 274.17, y: 129.58))
        clipPath.addLine(to: CGPoint(x: 272.63, y: 104.46))
        clipPath.addLine(to: CGPoint(x: 282.54, y: 117.45))
        clipPath.addLine(to: CGPoint(x: 304.76, y: 141.2))
        clipPath.addCurve(to: CGPoint(x: 316.55, y: 146.33), controlPoint1: CGPoint(x: 307.84, y: 144.45), controlPoint2: CGPoint(x: 312.11, y: 146.33))
        clipPath.addCurve(to: CGPoint(x: 332.28, y: 131.12), controlPoint1: CGPoint(x: 324.93, y: 146.33), controlPoint2: CGPoint(x: 332.28, y: 140.01))
        clipPath.addCurve(to: CGPoint(x: 327.32, y: 120.01), controlPoint1: CGPoint(x: 332.28, y: 126.68), controlPoint2: CGPoint(x: 330.4, y: 123.26))
        clipPath.addLine(to: CGPoint(x: 270.24, y: 65.15))
        clipPath.addCurve(to: CGPoint(x: 256.4, y: 59), controlPoint1: CGPoint(x: 265.63, y: 60.54), controlPoint2: CGPoint(x: 261.01, y: 59))
        clipPath.addCurve(to: CGPoint(x: 242.38, y: 65.15), controlPoint1: CGPoint(x: 251.61, y: 59), controlPoint2: CGPoint(x: 247, y: 60.54))
        clipPath.addLine(to: CGPoint(x: 185.3, y: 120.01))
        clipPath.addCurve(to: CGPoint(x: 180.35, y: 131.12), controlPoint1: CGPoint(x: 182.23, y: 123.26), controlPoint2: CGPoint(x: 180.35, y: 126.68))
        clipPath.addCurve(to: CGPoint(x: 196.07, y: 146.33), controlPoint1: CGPoint(x: 180.35, y: 140.01), controlPoint2: CGPoint(x: 187.53, y: 146.33))
        clipPath.addCurve(to: CGPoint(x: 207.86, y: 141.2), controlPoint1: CGPoint(x: 200.51, y: 146.33), controlPoint2: CGPoint(x: 204.79, y: 144.45))
        clipPath.addLine(to: CGPoint(x: 230.08, y: 117.45))
        clipPath.addLine(to: CGPoint(x: 239.99, y: 104.46))
        clipPath.addLine(to: CGPoint(x: 238.45, y: 129.58))
        clipPath.addLine(to: CGPoint(x: 238.45, y: 298.94))
        clipPath.addCurve(to: CGPoint(x: 256.4, y: 316.54), controlPoint1: CGPoint(x: 238.45, y: 308.34), controlPoint2: CGPoint(x: 246.49, y: 316.54))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 354.66, y: 454.97))
        clipPath.addCurve(to: CGPoint(x: 412.94, y: 397.04), controlPoint1: CGPoint(x: 392.77, y: 454.97), controlPoint2: CGPoint(x: 412.94, y: 434.81))
        clipPath.addLine(to: CGPoint(x: 412.94, y: 231.09))
        clipPath.addCurve(to: CGPoint(x: 354.66, y: 173.16), controlPoint1: CGPoint(x: 412.94, y: 193.33), controlPoint2: CGPoint(x: 392.77, y: 173.16))
        clipPath.addLine(to: CGPoint(x: 309.72, y: 173.16))
        clipPath.addLine(to: CGPoint(x: 309.72, y: 212.3))
        clipPath.addLine(to: CGPoint(x: 351.08, y: 212.3))
        clipPath.addCurve(to: CGPoint(x: 373.98, y: 235.37), controlPoint1: CGPoint(x: 365.77, y: 212.3), controlPoint2: CGPoint(x: 373.98, y: 219.82))
        clipPath.addLine(to: CGPoint(x: 373.98, y: 392.94))
        clipPath.addCurve(to: CGPoint(x: 351.08, y: 415.84), controlPoint1: CGPoint(x: 373.98, y: 408.32), controlPoint2: CGPoint(x: 365.77, y: 415.84))
        clipPath.addLine(to: CGPoint(x: 160.87, y: 415.84))
        clipPath.addCurve(to: CGPoint(x: 138.14, y: 392.94), controlPoint1: CGPoint(x: 146, y: 415.84), controlPoint2: CGPoint(x: 138.14, y: 408.32))
        clipPath.addLine(to: CGPoint(x: 138.14, y: 235.37))
        clipPath.addCurve(to: CGPoint(x: 160.87, y: 212.3), controlPoint1: CGPoint(x: 138.14, y: 219.82), controlPoint2: CGPoint(x: 146, y: 212.3))
        clipPath.addLine(to: CGPoint(x: 202.91, y: 212.3))
        clipPath.addLine(to: CGPoint(x: 202.91, y: 173.16))
        clipPath.addLine(to: CGPoint(x: 157.28, y: 173.16))
        clipPath.addCurve(to: CGPoint(x: 99, y: 231.09), controlPoint1: CGPoint(x: 119.34, y: 173.16), controlPoint2: CGPoint(x: 99, y: 193.33))
        clipPath.addLine(to: CGPoint(x: 99, y: 397.04))
        clipPath.addCurve(to: CGPoint(x: 157.28, y: 454.97), controlPoint1: CGPoint(x: 99, y: 434.81), controlPoint2: CGPoint(x: 119.34, y: 454.97))
        clipPath.addLine(to: CGPoint(x: 354.66, y: 454.97))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 256.4, y: 316.54))
        bezier2Path.addCurve(to: CGPoint(x: 274.17, y: 298.94), controlPoint1: CGPoint(x: 266.31, y: 316.54), controlPoint2: CGPoint(x: 274.17, y: 308.34))
        bezier2Path.addLine(to: CGPoint(x: 274.17, y: 129.58))
        bezier2Path.addLine(to: CGPoint(x: 272.63, y: 104.46))
        bezier2Path.addLine(to: CGPoint(x: 282.54, y: 117.45))
        bezier2Path.addLine(to: CGPoint(x: 304.76, y: 141.2))
        bezier2Path.addCurve(to: CGPoint(x: 316.55, y: 146.33), controlPoint1: CGPoint(x: 307.84, y: 144.45), controlPoint2: CGPoint(x: 312.11, y: 146.33))
        bezier2Path.addCurve(to: CGPoint(x: 332.28, y: 131.12), controlPoint1: CGPoint(x: 324.93, y: 146.33), controlPoint2: CGPoint(x: 332.28, y: 140.01))
        bezier2Path.addCurve(to: CGPoint(x: 327.32, y: 120.01), controlPoint1: CGPoint(x: 332.28, y: 126.68), controlPoint2: CGPoint(x: 330.4, y: 123.26))
        bezier2Path.addLine(to: CGPoint(x: 270.24, y: 65.15))
        bezier2Path.addCurve(to: CGPoint(x: 256.4, y: 59), controlPoint1: CGPoint(x: 265.63, y: 60.54), controlPoint2: CGPoint(x: 261.01, y: 59))
        bezier2Path.addCurve(to: CGPoint(x: 242.38, y: 65.15), controlPoint1: CGPoint(x: 251.61, y: 59), controlPoint2: CGPoint(x: 247, y: 60.54))
        bezier2Path.addLine(to: CGPoint(x: 185.3, y: 120.01))
        bezier2Path.addCurve(to: CGPoint(x: 180.35, y: 131.12), controlPoint1: CGPoint(x: 182.23, y: 123.26), controlPoint2: CGPoint(x: 180.35, y: 126.68))
        bezier2Path.addCurve(to: CGPoint(x: 196.07, y: 146.33), controlPoint1: CGPoint(x: 180.35, y: 140.01), controlPoint2: CGPoint(x: 187.53, y: 146.33))
        bezier2Path.addCurve(to: CGPoint(x: 207.86, y: 141.2), controlPoint1: CGPoint(x: 200.51, y: 146.33), controlPoint2: CGPoint(x: 204.79, y: 144.45))
        bezier2Path.addLine(to: CGPoint(x: 230.08, y: 117.45))
        bezier2Path.addLine(to: CGPoint(x: 239.99, y: 104.46))
        bezier2Path.addLine(to: CGPoint(x: 238.45, y: 129.58))
        bezier2Path.addLine(to: CGPoint(x: 238.45, y: 298.94))
        bezier2Path.addCurve(to: CGPoint(x: 256.4, y: 316.54), controlPoint1: CGPoint(x: 238.45, y: 308.34), controlPoint2: CGPoint(x: 246.49, y: 316.54))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 354.66, y: 454.97))
        bezier2Path.addCurve(to: CGPoint(x: 412.94, y: 397.04), controlPoint1: CGPoint(x: 392.77, y: 454.97), controlPoint2: CGPoint(x: 412.94, y: 434.81))
        bezier2Path.addLine(to: CGPoint(x: 412.94, y: 231.09))
        bezier2Path.addCurve(to: CGPoint(x: 354.66, y: 173.16), controlPoint1: CGPoint(x: 412.94, y: 193.33), controlPoint2: CGPoint(x: 392.77, y: 173.16))
        bezier2Path.addLine(to: CGPoint(x: 309.72, y: 173.16))
        bezier2Path.addLine(to: CGPoint(x: 309.72, y: 212.3))
        bezier2Path.addLine(to: CGPoint(x: 351.08, y: 212.3))
        bezier2Path.addCurve(to: CGPoint(x: 373.98, y: 235.37), controlPoint1: CGPoint(x: 365.77, y: 212.3), controlPoint2: CGPoint(x: 373.98, y: 219.82))
        bezier2Path.addLine(to: CGPoint(x: 373.98, y: 392.94))
        bezier2Path.addCurve(to: CGPoint(x: 351.08, y: 415.84), controlPoint1: CGPoint(x: 373.98, y: 408.32), controlPoint2: CGPoint(x: 365.77, y: 415.84))
        bezier2Path.addLine(to: CGPoint(x: 160.87, y: 415.84))
        bezier2Path.addCurve(to: CGPoint(x: 138.14, y: 392.94), controlPoint1: CGPoint(x: 146, y: 415.84), controlPoint2: CGPoint(x: 138.14, y: 408.32))
        bezier2Path.addLine(to: CGPoint(x: 138.14, y: 235.37))
        bezier2Path.addCurve(to: CGPoint(x: 160.87, y: 212.3), controlPoint1: CGPoint(x: 138.14, y: 219.82), controlPoint2: CGPoint(x: 146, y: 212.3))
        bezier2Path.addLine(to: CGPoint(x: 202.91, y: 212.3))
        bezier2Path.addLine(to: CGPoint(x: 202.91, y: 173.16))
        bezier2Path.addLine(to: CGPoint(x: 157.28, y: 173.16))
        bezier2Path.addCurve(to: CGPoint(x: 99, y: 231.09), controlPoint1: CGPoint(x: 119.34, y: 173.16), controlPoint2: CGPoint(x: 99, y: 193.33))
        bezier2Path.addLine(to: CGPoint(x: 99, y: 397.04))
        bezier2Path.addCurve(to: CGPoint(x: 157.28, y: 454.97), controlPoint1: CGPoint(x: 99, y: 434.81), controlPoint2: CGPoint(x: 119.34, y: 454.97))
        bezier2Path.addLine(to: CGPoint(x: 354.66, y: 454.97))
        bezier2Path.close()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 0
        bezier2Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 4
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 334.2, y: 450.96))
        bezier3Path.addCurve(to: CGPoint(x: 380.68, y: 407.04), controlPoint1: CGPoint(x: 361.88, y: 450.96), controlPoint2: CGPoint(x: 379.31, y: 434.9))
        bezier3Path.addLine(to: CGPoint(x: 391.96, y: 162.83))
        bezier3Path.addLine(to: CGPoint(x: 409.56, y: 162.83))
        bezier3Path.addCurve(to: CGPoint(x: 426.65, y: 145.74), controlPoint1: CGPoint(x: 419.3, y: 162.83), controlPoint2: CGPoint(x: 426.65, y: 155.48))
        bezier3Path.addCurve(to: CGPoint(x: 409.56, y: 128.82), controlPoint1: CGPoint(x: 426.65, y: 136.17), controlPoint2: CGPoint(x: 419.3, y: 128.82))
        bezier3Path.addLine(to: CGPoint(x: 335.22, y: 128.82))
        bezier3Path.addLine(to: CGPoint(x: 335.22, y: 107.63))
        bezier3Path.addCurve(to: CGPoint(x: 284.63, y: 62), controlPoint1: CGPoint(x: 335.22, y: 79.94), controlPoint2: CGPoint(x: 315.91, y: 62))
        bezier3Path.addLine(to: CGPoint(x: 225.85, y: 62))
        bezier3Path.addCurve(to: CGPoint(x: 175.26, y: 107.63), controlPoint1: CGPoint(x: 194.57, y: 62), controlPoint2: CGPoint(x: 175.26, y: 79.94))
        bezier3Path.addLine(to: CGPoint(x: 175.26, y: 128.82))
        bezier3Path.addLine(to: CGPoint(x: 101.26, y: 128.82))
        bezier3Path.addCurve(to: CGPoint(x: 84, y: 145.74), controlPoint1: CGPoint(x: 91.52, y: 128.82), controlPoint2: CGPoint(x: 84, y: 136.17))
        bezier3Path.addCurve(to: CGPoint(x: 101.26, y: 162.83), controlPoint1: CGPoint(x: 84, y: 155.48), controlPoint2: CGPoint(x: 91.52, y: 162.83))
        bezier3Path.addLine(to: CGPoint(x: 118.69, y: 162.83))
        bezier3Path.addLine(to: CGPoint(x: 130.14, y: 407.21))
        bezier3Path.addCurve(to: CGPoint(x: 176.8, y: 450.96), controlPoint1: CGPoint(x: 131.51, y: 435.07), controlPoint2: CGPoint(x: 148.77, y: 450.96))
        bezier3Path.addLine(to: CGPoint(x: 334.2, y: 450.96))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 299.67, y: 128.82))
        bezier3Path.addLine(to: CGPoint(x: 210.98, y: 128.82))
        bezier3Path.addLine(to: CGPoint(x: 211.15, y: 109))
        bezier3Path.addCurve(to: CGPoint(x: 227.9, y: 93.27), controlPoint1: CGPoint(x: 211.15, y: 99.77), controlPoint2: CGPoint(x: 217.98, y: 93.27))
        bezier3Path.addLine(to: CGPoint(x: 282.75, y: 93.27))
        bezier3Path.addCurve(to: CGPoint(x: 299.5, y: 109), controlPoint1: CGPoint(x: 292.67, y: 93.27), controlPoint2: CGPoint(x: 299.5, y: 99.77))
        bezier3Path.addLine(to: CGPoint(x: 299.67, y: 128.82))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 329.58, y: 416.61))
        bezier3Path.addLine(to: CGPoint(x: 181.07, y: 416.61))
        bezier3Path.addCurve(to: CGPoint(x: 165.01, y: 399.87), controlPoint1: CGPoint(x: 171.84, y: 416.61), controlPoint2: CGPoint(x: 165.52, y: 409.95))
        bezier3Path.addLine(to: CGPoint(x: 153.9, y: 162.83))
        bezier3Path.addLine(to: CGPoint(x: 356.41, y: 162.83))
        bezier3Path.addLine(to: CGPoint(x: 345.65, y: 399.87))
        bezier3Path.addCurve(to: CGPoint(x: 329.58, y: 416.61), controlPoint1: CGPoint(x: 345.3, y: 410.12), controlPoint2: CGPoint(x: 338.98, y: 416.61))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 305.48, y: 389.95))
        bezier3Path.addCurve(to: CGPoint(x: 317.79, y: 376.28), controlPoint1: CGPoint(x: 312.32, y: 389.95), controlPoint2: CGPoint(x: 317.62, y: 384.14))
        bezier3Path.addLine(to: CGPoint(x: 322.92, y: 204.36))
        bezier3Path.addCurve(to: CGPoint(x: 310.95, y: 190.52), controlPoint1: CGPoint(x: 323.26, y: 196.5), controlPoint2: CGPoint(x: 317.79, y: 190.52))
        bezier3Path.addCurve(to: CGPoint(x: 298.48, y: 204.19), controlPoint1: CGPoint(x: 304.12, y: 190.52), controlPoint2: CGPoint(x: 298.65, y: 196.67))
        bezier3Path.addLine(to: CGPoint(x: 293.35, y: 376.11))
        bezier3Path.addCurve(to: CGPoint(x: 305.48, y: 389.95), controlPoint1: CGPoint(x: 293.01, y: 383.8), controlPoint2: CGPoint(x: 298.48, y: 389.95))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 205.17, y: 389.95))
        bezier3Path.addCurve(to: CGPoint(x: 217.47, y: 376.11), controlPoint1: CGPoint(x: 212.34, y: 389.95), controlPoint2: CGPoint(x: 217.64, y: 383.8))
        bezier3Path.addLine(to: CGPoint(x: 212.34, y: 204.19))
        bezier3Path.addCurve(to: CGPoint(x: 199.87, y: 190.52), controlPoint1: CGPoint(x: 212, y: 196.67), controlPoint2: CGPoint(x: 206.53, y: 190.52))
        bezier3Path.addCurve(to: CGPoint(x: 187.91, y: 204.36), controlPoint1: CGPoint(x: 192.86, y: 190.52), controlPoint2: CGPoint(x: 187.56, y: 196.5))
        bezier3Path.addLine(to: CGPoint(x: 193.03, y: 376.28))
        bezier3Path.addCurve(to: CGPoint(x: 205.17, y: 389.95), controlPoint1: CGPoint(x: 193.2, y: 384.14), controlPoint2: CGPoint(x: 198.33, y: 389.95))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 255.41, y: 389.95))
        bezier3Path.addCurve(to: CGPoint(x: 267.72, y: 376.28), controlPoint1: CGPoint(x: 262.08, y: 389.95), controlPoint2: CGPoint(x: 267.72, y: 383.8))
        bezier3Path.addLine(to: CGPoint(x: 267.72, y: 204.19))
        bezier3Path.addCurve(to: CGPoint(x: 255.41, y: 190.52), controlPoint1: CGPoint(x: 267.72, y: 196.67), controlPoint2: CGPoint(x: 262.25, y: 190.52))
        bezier3Path.addCurve(to: CGPoint(x: 242.94, y: 204.19), controlPoint1: CGPoint(x: 248.58, y: 190.52), controlPoint2: CGPoint(x: 242.94, y: 196.67))
        bezier3Path.addLine(to: CGPoint(x: 242.94, y: 376.28))
        bezier3Path.addCurve(to: CGPoint(x: 255.41, y: 389.95), controlPoint1: CGPoint(x: 242.94, y: 383.8), controlPoint2: CGPoint(x: 248.58, y: 389.95))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()


        //// Group 5
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 24, y: 2))
        clip2Path.addLine(to: CGPoint(x: 486.65, y: 2))
        clip2Path.addLine(to: CGPoint(x: 486.65, y: 510.96))
        clip2Path.addLine(to: CGPoint(x: 24, y: 510.96))
        clip2Path.addLine(to: CGPoint(x: 24, y: 2))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 334.2, y: 450.96))
        clip2Path.addCurve(to: CGPoint(x: 380.68, y: 407.04), controlPoint1: CGPoint(x: 361.88, y: 450.96), controlPoint2: CGPoint(x: 379.31, y: 434.9))
        clip2Path.addLine(to: CGPoint(x: 391.96, y: 162.83))
        clip2Path.addLine(to: CGPoint(x: 409.56, y: 162.83))
        clip2Path.addCurve(to: CGPoint(x: 426.65, y: 145.74), controlPoint1: CGPoint(x: 419.3, y: 162.83), controlPoint2: CGPoint(x: 426.65, y: 155.48))
        clip2Path.addCurve(to: CGPoint(x: 409.56, y: 128.82), controlPoint1: CGPoint(x: 426.65, y: 136.17), controlPoint2: CGPoint(x: 419.3, y: 128.82))
        clip2Path.addLine(to: CGPoint(x: 335.22, y: 128.82))
        clip2Path.addLine(to: CGPoint(x: 335.22, y: 107.63))
        clip2Path.addCurve(to: CGPoint(x: 284.63, y: 62), controlPoint1: CGPoint(x: 335.22, y: 79.94), controlPoint2: CGPoint(x: 315.91, y: 62))
        clip2Path.addLine(to: CGPoint(x: 225.85, y: 62))
        clip2Path.addCurve(to: CGPoint(x: 175.26, y: 107.63), controlPoint1: CGPoint(x: 194.57, y: 62), controlPoint2: CGPoint(x: 175.26, y: 79.94))
        clip2Path.addLine(to: CGPoint(x: 175.26, y: 128.82))
        clip2Path.addLine(to: CGPoint(x: 101.26, y: 128.82))
        clip2Path.addCurve(to: CGPoint(x: 84, y: 145.74), controlPoint1: CGPoint(x: 91.52, y: 128.82), controlPoint2: CGPoint(x: 84, y: 136.17))
        clip2Path.addCurve(to: CGPoint(x: 101.26, y: 162.83), controlPoint1: CGPoint(x: 84, y: 155.48), controlPoint2: CGPoint(x: 91.52, y: 162.83))
        clip2Path.addLine(to: CGPoint(x: 118.69, y: 162.83))
        clip2Path.addLine(to: CGPoint(x: 130.14, y: 407.21))
        clip2Path.addCurve(to: CGPoint(x: 176.8, y: 450.96), controlPoint1: CGPoint(x: 131.51, y: 435.07), controlPoint2: CGPoint(x: 148.77, y: 450.96))
        clip2Path.addLine(to: CGPoint(x: 334.2, y: 450.96))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 299.67, y: 128.82))
        clip2Path.addLine(to: CGPoint(x: 210.98, y: 128.82))
        clip2Path.addLine(to: CGPoint(x: 211.15, y: 109))
        clip2Path.addCurve(to: CGPoint(x: 227.9, y: 93.27), controlPoint1: CGPoint(x: 211.15, y: 99.77), controlPoint2: CGPoint(x: 217.98, y: 93.27))
        clip2Path.addLine(to: CGPoint(x: 282.75, y: 93.27))
        clip2Path.addCurve(to: CGPoint(x: 299.5, y: 109), controlPoint1: CGPoint(x: 292.67, y: 93.27), controlPoint2: CGPoint(x: 299.5, y: 99.77))
        clip2Path.addLine(to: CGPoint(x: 299.67, y: 128.82))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 329.58, y: 416.61))
        clip2Path.addLine(to: CGPoint(x: 181.07, y: 416.61))
        clip2Path.addCurve(to: CGPoint(x: 165.01, y: 399.87), controlPoint1: CGPoint(x: 171.84, y: 416.61), controlPoint2: CGPoint(x: 165.52, y: 409.95))
        clip2Path.addLine(to: CGPoint(x: 153.9, y: 162.83))
        clip2Path.addLine(to: CGPoint(x: 356.41, y: 162.83))
        clip2Path.addLine(to: CGPoint(x: 345.65, y: 399.87))
        clip2Path.addCurve(to: CGPoint(x: 329.58, y: 416.61), controlPoint1: CGPoint(x: 345.3, y: 410.12), controlPoint2: CGPoint(x: 338.98, y: 416.61))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 305.48, y: 389.95))
        clip2Path.addCurve(to: CGPoint(x: 317.79, y: 376.28), controlPoint1: CGPoint(x: 312.32, y: 389.95), controlPoint2: CGPoint(x: 317.62, y: 384.14))
        clip2Path.addLine(to: CGPoint(x: 322.92, y: 204.36))
        clip2Path.addCurve(to: CGPoint(x: 310.95, y: 190.52), controlPoint1: CGPoint(x: 323.26, y: 196.5), controlPoint2: CGPoint(x: 317.79, y: 190.52))
        clip2Path.addCurve(to: CGPoint(x: 298.48, y: 204.19), controlPoint1: CGPoint(x: 304.12, y: 190.52), controlPoint2: CGPoint(x: 298.65, y: 196.67))
        clip2Path.addLine(to: CGPoint(x: 293.35, y: 376.11))
        clip2Path.addCurve(to: CGPoint(x: 305.48, y: 389.95), controlPoint1: CGPoint(x: 293.01, y: 383.8), controlPoint2: CGPoint(x: 298.48, y: 389.95))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 205.17, y: 389.95))
        clip2Path.addCurve(to: CGPoint(x: 217.47, y: 376.11), controlPoint1: CGPoint(x: 212.34, y: 389.95), controlPoint2: CGPoint(x: 217.64, y: 383.8))
        clip2Path.addLine(to: CGPoint(x: 212.34, y: 204.19))
        clip2Path.addCurve(to: CGPoint(x: 199.87, y: 190.52), controlPoint1: CGPoint(x: 212, y: 196.67), controlPoint2: CGPoint(x: 206.53, y: 190.52))
        clip2Path.addCurve(to: CGPoint(x: 187.91, y: 204.36), controlPoint1: CGPoint(x: 192.86, y: 190.52), controlPoint2: CGPoint(x: 187.56, y: 196.5))
        clip2Path.addLine(to: CGPoint(x: 193.03, y: 376.28))
        clip2Path.addCurve(to: CGPoint(x: 205.17, y: 389.95), controlPoint1: CGPoint(x: 193.2, y: 384.14), controlPoint2: CGPoint(x: 198.33, y: 389.95))
        clip2Path.close()
        clip2Path.move(to: CGPoint(x: 255.41, y: 389.95))
        clip2Path.addCurve(to: CGPoint(x: 267.72, y: 376.28), controlPoint1: CGPoint(x: 262.08, y: 389.95), controlPoint2: CGPoint(x: 267.72, y: 383.8))
        clip2Path.addLine(to: CGPoint(x: 267.72, y: 204.19))
        clip2Path.addCurve(to: CGPoint(x: 255.41, y: 190.52), controlPoint1: CGPoint(x: 267.72, y: 196.67), controlPoint2: CGPoint(x: 262.25, y: 190.52))
        clip2Path.addCurve(to: CGPoint(x: 242.94, y: 204.19), controlPoint1: CGPoint(x: 248.58, y: 190.52), controlPoint2: CGPoint(x: 242.94, y: 196.67))
        clip2Path.addLine(to: CGPoint(x: 242.94, y: 376.28))
        clip2Path.addCurve(to: CGPoint(x: 255.41, y: 389.95), controlPoint1: CGPoint(x: 242.94, y: 383.8), controlPoint2: CGPoint(x: 248.58, y: 389.95))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 334.2, y: 450.96))
        bezier4Path.addCurve(to: CGPoint(x: 380.68, y: 407.04), controlPoint1: CGPoint(x: 361.88, y: 450.96), controlPoint2: CGPoint(x: 379.31, y: 434.9))
        bezier4Path.addLine(to: CGPoint(x: 391.96, y: 162.83))
        bezier4Path.addLine(to: CGPoint(x: 409.56, y: 162.83))
        bezier4Path.addCurve(to: CGPoint(x: 426.65, y: 145.74), controlPoint1: CGPoint(x: 419.3, y: 162.83), controlPoint2: CGPoint(x: 426.65, y: 155.48))
        bezier4Path.addCurve(to: CGPoint(x: 409.56, y: 128.82), controlPoint1: CGPoint(x: 426.65, y: 136.17), controlPoint2: CGPoint(x: 419.3, y: 128.82))
        bezier4Path.addLine(to: CGPoint(x: 335.22, y: 128.82))
        bezier4Path.addLine(to: CGPoint(x: 335.22, y: 107.63))
        bezier4Path.addCurve(to: CGPoint(x: 284.63, y: 62), controlPoint1: CGPoint(x: 335.22, y: 79.94), controlPoint2: CGPoint(x: 315.91, y: 62))
        bezier4Path.addLine(to: CGPoint(x: 225.85, y: 62))
        bezier4Path.addCurve(to: CGPoint(x: 175.26, y: 107.63), controlPoint1: CGPoint(x: 194.57, y: 62), controlPoint2: CGPoint(x: 175.26, y: 79.94))
        bezier4Path.addLine(to: CGPoint(x: 175.26, y: 128.82))
        bezier4Path.addLine(to: CGPoint(x: 101.26, y: 128.82))
        bezier4Path.addCurve(to: CGPoint(x: 84, y: 145.74), controlPoint1: CGPoint(x: 91.52, y: 128.82), controlPoint2: CGPoint(x: 84, y: 136.17))
        bezier4Path.addCurve(to: CGPoint(x: 101.26, y: 162.83), controlPoint1: CGPoint(x: 84, y: 155.48), controlPoint2: CGPoint(x: 91.52, y: 162.83))
        bezier4Path.addLine(to: CGPoint(x: 118.69, y: 162.83))
        bezier4Path.addLine(to: CGPoint(x: 130.14, y: 407.21))
        bezier4Path.addCurve(to: CGPoint(x: 176.8, y: 450.96), controlPoint1: CGPoint(x: 131.51, y: 435.07), controlPoint2: CGPoint(x: 148.77, y: 450.96))
        bezier4Path.addLine(to: CGPoint(x: 334.2, y: 450.96))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 299.67, y: 128.82))
        bezier4Path.addLine(to: CGPoint(x: 210.98, y: 128.82))
        bezier4Path.addLine(to: CGPoint(x: 211.15, y: 109))
        bezier4Path.addCurve(to: CGPoint(x: 227.9, y: 93.27), controlPoint1: CGPoint(x: 211.15, y: 99.77), controlPoint2: CGPoint(x: 217.98, y: 93.27))
        bezier4Path.addLine(to: CGPoint(x: 282.75, y: 93.27))
        bezier4Path.addCurve(to: CGPoint(x: 299.5, y: 109), controlPoint1: CGPoint(x: 292.67, y: 93.27), controlPoint2: CGPoint(x: 299.5, y: 99.77))
        bezier4Path.addLine(to: CGPoint(x: 299.67, y: 128.82))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 329.58, y: 416.61))
        bezier4Path.addLine(to: CGPoint(x: 181.07, y: 416.61))
        bezier4Path.addCurve(to: CGPoint(x: 165.01, y: 399.87), controlPoint1: CGPoint(x: 171.84, y: 416.61), controlPoint2: CGPoint(x: 165.52, y: 409.95))
        bezier4Path.addLine(to: CGPoint(x: 153.9, y: 162.83))
        bezier4Path.addLine(to: CGPoint(x: 356.41, y: 162.83))
        bezier4Path.addLine(to: CGPoint(x: 345.65, y: 399.87))
        bezier4Path.addCurve(to: CGPoint(x: 329.58, y: 416.61), controlPoint1: CGPoint(x: 345.3, y: 410.12), controlPoint2: CGPoint(x: 338.98, y: 416.61))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 305.48, y: 389.95))
        bezier4Path.addCurve(to: CGPoint(x: 317.79, y: 376.28), controlPoint1: CGPoint(x: 312.32, y: 389.95), controlPoint2: CGPoint(x: 317.62, y: 384.14))
        bezier4Path.addLine(to: CGPoint(x: 322.92, y: 204.36))
        bezier4Path.addCurve(to: CGPoint(x: 310.95, y: 190.52), controlPoint1: CGPoint(x: 323.26, y: 196.5), controlPoint2: CGPoint(x: 317.79, y: 190.52))
        bezier4Path.addCurve(to: CGPoint(x: 298.48, y: 204.19), controlPoint1: CGPoint(x: 304.12, y: 190.52), controlPoint2: CGPoint(x: 298.65, y: 196.67))
        bezier4Path.addLine(to: CGPoint(x: 293.35, y: 376.11))
        bezier4Path.addCurve(to: CGPoint(x: 305.48, y: 389.95), controlPoint1: CGPoint(x: 293.01, y: 383.8), controlPoint2: CGPoint(x: 298.48, y: 389.95))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 205.17, y: 389.95))
        bezier4Path.addCurve(to: CGPoint(x: 217.47, y: 376.11), controlPoint1: CGPoint(x: 212.34, y: 389.95), controlPoint2: CGPoint(x: 217.64, y: 383.8))
        bezier4Path.addLine(to: CGPoint(x: 212.34, y: 204.19))
        bezier4Path.addCurve(to: CGPoint(x: 199.87, y: 190.52), controlPoint1: CGPoint(x: 212, y: 196.67), controlPoint2: CGPoint(x: 206.53, y: 190.52))
        bezier4Path.addCurve(to: CGPoint(x: 187.91, y: 204.36), controlPoint1: CGPoint(x: 192.86, y: 190.52), controlPoint2: CGPoint(x: 187.56, y: 196.5))
        bezier4Path.addLine(to: CGPoint(x: 193.03, y: 376.28))
        bezier4Path.addCurve(to: CGPoint(x: 205.17, y: 389.95), controlPoint1: CGPoint(x: 193.2, y: 384.14), controlPoint2: CGPoint(x: 198.33, y: 389.95))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 255.41, y: 389.95))
        bezier4Path.addCurve(to: CGPoint(x: 267.72, y: 376.28), controlPoint1: CGPoint(x: 262.08, y: 389.95), controlPoint2: CGPoint(x: 267.72, y: 383.8))
        bezier4Path.addLine(to: CGPoint(x: 267.72, y: 204.19))
        bezier4Path.addCurve(to: CGPoint(x: 255.41, y: 190.52), controlPoint1: CGPoint(x: 267.72, y: 196.67), controlPoint2: CGPoint(x: 262.25, y: 190.52))
        bezier4Path.addCurve(to: CGPoint(x: 242.94, y: 204.19), controlPoint1: CGPoint(x: 248.58, y: 190.52), controlPoint2: CGPoint(x: 242.94, y: 196.67))
        bezier4Path.addLine(to: CGPoint(x: 242.94, y: 376.28))
        bezier4Path.addCurve(to: CGPoint(x: 255.41, y: 389.95), controlPoint1: CGPoint(x: 242.94, y: 383.8), controlPoint2: CGPoint(x: 248.58, y: 389.95))
        bezier4Path.close()
        strokeColor.setStroke()
        bezier4Path.lineWidth = 0
        bezier4Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFind(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 391.1, y: 422.06))
        bezierPath.addCurve(to: CGPoint(x: 420.15, y: 392.66), controlPoint1: CGPoint(x: 407.67, y: 422.06), controlPoint2: CGPoint(x: 420.15, y: 409.07))
        bezierPath.addCurve(to: CGPoint(x: 411.78, y: 371.81), controlPoint1: CGPoint(x: 420.15, y: 384.97), controlPoint2: CGPoint(x: 417.59, y: 377.62))
        bezierPath.addLine(to: CGPoint(x: 342.05, y: 301.91))
        bezierPath.addCurve(to: CGPoint(x: 364.61, y: 226.89), controlPoint1: CGPoint(x: 356.41, y: 280.38), controlPoint2: CGPoint(x: 364.61, y: 254.58))
        bezierPath.addCurve(to: CGPoint(x: 227.89, y: 90), controlPoint1: CGPoint(x: 364.61, y: 151.69), controlPoint2: CGPoint(x: 303.09, y: 90))
        bezierPath.addCurve(to: CGPoint(x: 91, y: 226.89), controlPoint1: CGPoint(x: 152.69, y: 90), controlPoint2: CGPoint(x: 91, y: 151.69))
        bezierPath.addCurve(to: CGPoint(x: 227.89, y: 363.78), controlPoint1: CGPoint(x: 91, y: 302.08), controlPoint2: CGPoint(x: 152.69, y: 363.78))
        bezierPath.addCurve(to: CGPoint(x: 299.5, y: 343.27), controlPoint1: CGPoint(x: 254.04, y: 363.78), controlPoint2: CGPoint(x: 278.65, y: 356.26))
        bezierPath.addLine(to: CGPoint(x: 369.91, y: 413.68))
        bezierPath.addCurve(to: CGPoint(x: 391.1, y: 422.06), controlPoint1: CGPoint(x: 375.55, y: 419.32), controlPoint2: CGPoint(x: 383.24, y: 422.06))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 227.89, y: 322.08))
        bezierPath.addCurve(to: CGPoint(x: 132.53, y: 226.89), controlPoint1: CGPoint(x: 175.42, y: 322.08), controlPoint2: CGPoint(x: 132.53, y: 279.18))
        bezierPath.addCurve(to: CGPoint(x: 227.89, y: 131.7), controlPoint1: CGPoint(x: 132.53, y: 174.59), controlPoint2: CGPoint(x: 175.42, y: 131.7))
        bezierPath.addCurve(to: CGPoint(x: 323.08, y: 226.89), controlPoint1: CGPoint(x: 280.18, y: 131.7), controlPoint2: CGPoint(x: 323.08, y: 174.59))
        bezierPath.addCurve(to: CGPoint(x: 227.89, y: 322.08), controlPoint1: CGPoint(x: 323.08, y: 279.18), controlPoint2: CGPoint(x: 280.18, y: 322.08))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 31, y: 30))
        clipPath.addLine(to: CGPoint(x: 480.15, y: 30))
        clipPath.addLine(to: CGPoint(x: 480.15, y: 482.06))
        clipPath.addLine(to: CGPoint(x: 31, y: 482.06))
        clipPath.addLine(to: CGPoint(x: 31, y: 30))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 391.1, y: 422.06))
        clipPath.addCurve(to: CGPoint(x: 420.15, y: 392.66), controlPoint1: CGPoint(x: 407.67, y: 422.06), controlPoint2: CGPoint(x: 420.15, y: 409.07))
        clipPath.addCurve(to: CGPoint(x: 411.78, y: 371.81), controlPoint1: CGPoint(x: 420.15, y: 384.97), controlPoint2: CGPoint(x: 417.59, y: 377.62))
        clipPath.addLine(to: CGPoint(x: 342.05, y: 301.91))
        clipPath.addCurve(to: CGPoint(x: 364.61, y: 226.89), controlPoint1: CGPoint(x: 356.41, y: 280.38), controlPoint2: CGPoint(x: 364.61, y: 254.58))
        clipPath.addCurve(to: CGPoint(x: 227.89, y: 90), controlPoint1: CGPoint(x: 364.61, y: 151.69), controlPoint2: CGPoint(x: 303.09, y: 90))
        clipPath.addCurve(to: CGPoint(x: 91, y: 226.89), controlPoint1: CGPoint(x: 152.69, y: 90), controlPoint2: CGPoint(x: 91, y: 151.69))
        clipPath.addCurve(to: CGPoint(x: 227.89, y: 363.78), controlPoint1: CGPoint(x: 91, y: 302.08), controlPoint2: CGPoint(x: 152.69, y: 363.78))
        clipPath.addCurve(to: CGPoint(x: 299.5, y: 343.27), controlPoint1: CGPoint(x: 254.04, y: 363.78), controlPoint2: CGPoint(x: 278.65, y: 356.26))
        clipPath.addLine(to: CGPoint(x: 369.91, y: 413.68))
        clipPath.addCurve(to: CGPoint(x: 391.1, y: 422.06), controlPoint1: CGPoint(x: 375.55, y: 419.32), controlPoint2: CGPoint(x: 383.24, y: 422.06))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 227.89, y: 322.08))
        clipPath.addCurve(to: CGPoint(x: 132.53, y: 226.89), controlPoint1: CGPoint(x: 175.42, y: 322.08), controlPoint2: CGPoint(x: 132.53, y: 279.18))
        clipPath.addCurve(to: CGPoint(x: 227.89, y: 131.7), controlPoint1: CGPoint(x: 132.53, y: 174.59), controlPoint2: CGPoint(x: 175.42, y: 131.7))
        clipPath.addCurve(to: CGPoint(x: 323.08, y: 226.89), controlPoint1: CGPoint(x: 280.18, y: 131.7), controlPoint2: CGPoint(x: 323.08, y: 174.59))
        clipPath.addCurve(to: CGPoint(x: 227.89, y: 322.08), controlPoint1: CGPoint(x: 323.08, y: 279.18), controlPoint2: CGPoint(x: 280.18, y: 322.08))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 391.1, y: 422.06))
        bezier2Path.addCurve(to: CGPoint(x: 420.15, y: 392.66), controlPoint1: CGPoint(x: 407.67, y: 422.06), controlPoint2: CGPoint(x: 420.15, y: 409.07))
        bezier2Path.addCurve(to: CGPoint(x: 411.78, y: 371.81), controlPoint1: CGPoint(x: 420.15, y: 384.97), controlPoint2: CGPoint(x: 417.59, y: 377.62))
        bezier2Path.addLine(to: CGPoint(x: 342.05, y: 301.91))
        bezier2Path.addCurve(to: CGPoint(x: 364.61, y: 226.89), controlPoint1: CGPoint(x: 356.41, y: 280.38), controlPoint2: CGPoint(x: 364.61, y: 254.58))
        bezier2Path.addCurve(to: CGPoint(x: 227.89, y: 90), controlPoint1: CGPoint(x: 364.61, y: 151.69), controlPoint2: CGPoint(x: 303.09, y: 90))
        bezier2Path.addCurve(to: CGPoint(x: 91, y: 226.89), controlPoint1: CGPoint(x: 152.69, y: 90), controlPoint2: CGPoint(x: 91, y: 151.69))
        bezier2Path.addCurve(to: CGPoint(x: 227.89, y: 363.78), controlPoint1: CGPoint(x: 91, y: 302.09), controlPoint2: CGPoint(x: 152.69, y: 363.78))
        bezier2Path.addCurve(to: CGPoint(x: 299.5, y: 343.27), controlPoint1: CGPoint(x: 254.04, y: 363.78), controlPoint2: CGPoint(x: 278.65, y: 356.26))
        bezier2Path.addLine(to: CGPoint(x: 369.91, y: 413.68))
        bezier2Path.addCurve(to: CGPoint(x: 391.1, y: 422.06), controlPoint1: CGPoint(x: 375.55, y: 419.32), controlPoint2: CGPoint(x: 383.24, y: 422.06))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 227.89, y: 322.08))
        bezier2Path.addCurve(to: CGPoint(x: 132.53, y: 226.89), controlPoint1: CGPoint(x: 175.42, y: 322.08), controlPoint2: CGPoint(x: 132.53, y: 279.18))
        bezier2Path.addCurve(to: CGPoint(x: 227.89, y: 131.7), controlPoint1: CGPoint(x: 132.53, y: 174.59), controlPoint2: CGPoint(x: 175.42, y: 131.7))
        bezier2Path.addCurve(to: CGPoint(x: 323.08, y: 226.89), controlPoint1: CGPoint(x: 280.18, y: 131.7), controlPoint2: CGPoint(x: 323.08, y: 174.59))
        bezier2Path.addCurve(to: CGPoint(x: 227.89, y: 322.08), controlPoint1: CGPoint(x: 323.08, y: 279.18), controlPoint2: CGPoint(x: 280.18, y: 322.08))
        bezier2Path.close()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 0
        bezier2Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHeartFill(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 255.34, y: 419.22))
        bezierPath.addCurve(to: CGPoint(x: 274.65, y: 410.85), controlPoint1: CGPoint(x: 260.47, y: 419.22), controlPoint2: CGPoint(x: 267.99, y: 415.12))
        bezierPath.addCurve(to: CGPoint(x: 430.85, y: 203.55), controlPoint1: CGPoint(x: 369.33, y: 349.32), controlPoint2: CGPoint(x: 430.85, y: 276.86))
        bezierPath.addCurve(to: CGPoint(x: 330.37, y: 94), controlPoint1: CGPoint(x: 430.85, y: 138.6), controlPoint2: CGPoint(x: 385.57, y: 94))
        bezierPath.addCurve(to: CGPoint(x: 255.34, y: 141), controlPoint1: CGPoint(x: 295.84, y: 94), controlPoint2: CGPoint(x: 270.55, y: 112.97))
        bezierPath.addCurve(to: CGPoint(x: 180.49, y: 94), controlPoint1: CGPoint(x: 240.47, y: 113.14), controlPoint2: CGPoint(x: 214.84, y: 94))
        bezierPath.addCurve(to: CGPoint(x: 80, y: 203.55), controlPoint1: CGPoint(x: 125.12, y: 94), controlPoint2: CGPoint(x: 80, y: 138.6))
        bezierPath.addCurve(to: CGPoint(x: 236.2, y: 410.85), controlPoint1: CGPoint(x: 80, y: 276.86), controlPoint2: CGPoint(x: 141.52, y: 349.32))
        bezierPath.addCurve(to: CGPoint(x: 255.34, y: 419.22), controlPoint1: CGPoint(x: 242.7, y: 415.12), controlPoint2: CGPoint(x: 250.39, y: 419.22))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 20, y: 34))
        clipPath.addLine(to: CGPoint(x: 490.85, y: 34))
        clipPath.addLine(to: CGPoint(x: 490.85, y: 479.22))
        clipPath.addLine(to: CGPoint(x: 20, y: 479.22))
        clipPath.addLine(to: CGPoint(x: 20, y: 34))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 255.34, y: 419.22))
        clipPath.addCurve(to: CGPoint(x: 274.65, y: 410.85), controlPoint1: CGPoint(x: 260.47, y: 419.22), controlPoint2: CGPoint(x: 267.99, y: 415.12))
        clipPath.addCurve(to: CGPoint(x: 430.85, y: 203.55), controlPoint1: CGPoint(x: 369.33, y: 349.32), controlPoint2: CGPoint(x: 430.85, y: 276.86))
        clipPath.addCurve(to: CGPoint(x: 330.37, y: 94), controlPoint1: CGPoint(x: 430.85, y: 138.6), controlPoint2: CGPoint(x: 385.57, y: 94))
        clipPath.addCurve(to: CGPoint(x: 255.34, y: 141), controlPoint1: CGPoint(x: 295.84, y: 94), controlPoint2: CGPoint(x: 270.55, y: 112.97))
        clipPath.addCurve(to: CGPoint(x: 180.49, y: 94), controlPoint1: CGPoint(x: 240.47, y: 113.14), controlPoint2: CGPoint(x: 214.84, y: 94))
        clipPath.addCurve(to: CGPoint(x: 80, y: 203.55), controlPoint1: CGPoint(x: 125.12, y: 94), controlPoint2: CGPoint(x: 80, y: 138.6))
        clipPath.addCurve(to: CGPoint(x: 236.2, y: 410.85), controlPoint1: CGPoint(x: 80, y: 276.86), controlPoint2: CGPoint(x: 141.52, y: 349.32))
        clipPath.addCurve(to: CGPoint(x: 255.34, y: 419.22), controlPoint1: CGPoint(x: 242.7, y: 415.12), controlPoint2: CGPoint(x: 250.39, y: 419.22))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 255.34, y: 419.22))
        bezier2Path.addCurve(to: CGPoint(x: 274.65, y: 410.85), controlPoint1: CGPoint(x: 260.47, y: 419.22), controlPoint2: CGPoint(x: 267.99, y: 415.12))
        bezier2Path.addCurve(to: CGPoint(x: 430.85, y: 203.55), controlPoint1: CGPoint(x: 369.33, y: 349.32), controlPoint2: CGPoint(x: 430.85, y: 276.86))
        bezier2Path.addCurve(to: CGPoint(x: 330.37, y: 94), controlPoint1: CGPoint(x: 430.85, y: 138.6), controlPoint2: CGPoint(x: 385.57, y: 94))
        bezier2Path.addCurve(to: CGPoint(x: 255.34, y: 141), controlPoint1: CGPoint(x: 295.84, y: 94), controlPoint2: CGPoint(x: 270.55, y: 112.97))
        bezier2Path.addCurve(to: CGPoint(x: 180.49, y: 94), controlPoint1: CGPoint(x: 240.47, y: 113.14), controlPoint2: CGPoint(x: 214.84, y: 94))
        bezier2Path.addCurve(to: CGPoint(x: 80, y: 203.55), controlPoint1: CGPoint(x: 125.12, y: 94), controlPoint2: CGPoint(x: 80, y: 138.6))
        bezier2Path.addCurve(to: CGPoint(x: 236.2, y: 410.85), controlPoint1: CGPoint(x: 80, y: 276.86), controlPoint2: CGPoint(x: 141.52, y: 349.32))
        bezier2Path.addCurve(to: CGPoint(x: 255.34, y: 419.22), controlPoint1: CGPoint(x: 242.7, y: 415.12), controlPoint2: CGPoint(x: 250.39, y: 419.22))
        bezier2Path.close()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 0
        bezier2Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHeart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 512, height: 512), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 512, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 512, y: resizedFrame.height / 512)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 255.34, y: 419.22))
        bezierPath.addCurve(to: CGPoint(x: 274.65, y: 410.85), controlPoint1: CGPoint(x: 260.47, y: 419.22), controlPoint2: CGPoint(x: 267.99, y: 415.12))
        bezierPath.addCurve(to: CGPoint(x: 430.85, y: 203.55), controlPoint1: CGPoint(x: 369.33, y: 349.32), controlPoint2: CGPoint(x: 430.85, y: 276.86))
        bezierPath.addCurve(to: CGPoint(x: 329.17, y: 94), controlPoint1: CGPoint(x: 430.85, y: 138.6), controlPoint2: CGPoint(x: 385.57, y: 94))
        bezierPath.addCurve(to: CGPoint(x: 255.34, y: 131.08), controlPoint1: CGPoint(x: 295.84, y: 94), controlPoint2: CGPoint(x: 270.55, y: 108.87))
        bezierPath.addCurve(to: CGPoint(x: 181.68, y: 94), controlPoint1: CGPoint(x: 240.47, y: 109.04), controlPoint2: CGPoint(x: 214.84, y: 94))
        bezierPath.addCurve(to: CGPoint(x: 80, y: 203.55), controlPoint1: CGPoint(x: 125.12, y: 94), controlPoint2: CGPoint(x: 80, y: 138.6))
        bezierPath.addCurve(to: CGPoint(x: 236.2, y: 410.85), controlPoint1: CGPoint(x: 80, y: 276.86), controlPoint2: CGPoint(x: 141.52, y: 349.32))
        bezierPath.addCurve(to: CGPoint(x: 255.34, y: 419.22), controlPoint1: CGPoint(x: 242.7, y: 415.12), controlPoint2: CGPoint(x: 250.39, y: 419.22))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 255.34, y: 375.64))
        bezierPath.addCurve(to: CGPoint(x: 252.44, y: 374.27), controlPoint1: CGPoint(x: 254.83, y: 375.64), controlPoint2: CGPoint(x: 253.8, y: 375.13))
        bezierPath.addCurve(to: CGPoint(x: 121.02, y: 203.37), controlPoint1: CGPoint(x: 179.98, y: 325.91), controlPoint2: CGPoint(x: 121.02, y: 260.8))
        bezierPath.addCurve(to: CGPoint(x: 185.62, y: 133.82), controlPoint1: CGPoint(x: 121.02, y: 162.02), controlPoint2: CGPoint(x: 148.7, y: 133.82))
        bezierPath.addCurve(to: CGPoint(x: 242.18, y: 166.97), controlPoint1: CGPoint(x: 215.18, y: 133.82), controlPoint2: CGPoint(x: 231.59, y: 151.25))
        bezierPath.addCurve(to: CGPoint(x: 255.34, y: 176.54), controlPoint1: CGPoint(x: 246.97, y: 173.81), controlPoint2: CGPoint(x: 250.56, y: 176.54))
        bezierPath.addCurve(to: CGPoint(x: 268.5, y: 166.97), controlPoint1: CGPoint(x: 260.3, y: 176.54), controlPoint2: CGPoint(x: 263.54, y: 173.81))
        bezierPath.addCurve(to: CGPoint(x: 325.24, y: 133.82), controlPoint1: CGPoint(x: 279.78, y: 151.42), controlPoint2: CGPoint(x: 295.67, y: 133.82))
        bezierPath.addCurve(to: CGPoint(x: 389.84, y: 203.37), controlPoint1: CGPoint(x: 362.15, y: 133.82), controlPoint2: CGPoint(x: 389.84, y: 162.02))
        bezierPath.addCurve(to: CGPoint(x: 258.42, y: 374.27), controlPoint1: CGPoint(x: 389.84, y: 260.8), controlPoint2: CGPoint(x: 330.88, y: 325.91))
        bezierPath.addCurve(to: CGPoint(x: 255.34, y: 375.64), controlPoint1: CGPoint(x: 257.05, y: 375.13), controlPoint2: CGPoint(x: 256.03, y: 375.64))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 20, y: 34))
        clipPath.addLine(to: CGPoint(x: 490.85, y: 34))
        clipPath.addLine(to: CGPoint(x: 490.85, y: 479.22))
        clipPath.addLine(to: CGPoint(x: 20, y: 479.22))
        clipPath.addLine(to: CGPoint(x: 20, y: 34))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 255.34, y: 419.22))
        clipPath.addCurve(to: CGPoint(x: 274.65, y: 410.85), controlPoint1: CGPoint(x: 260.47, y: 419.22), controlPoint2: CGPoint(x: 267.99, y: 415.12))
        clipPath.addCurve(to: CGPoint(x: 430.85, y: 203.55), controlPoint1: CGPoint(x: 369.33, y: 349.32), controlPoint2: CGPoint(x: 430.85, y: 276.86))
        clipPath.addCurve(to: CGPoint(x: 329.17, y: 94), controlPoint1: CGPoint(x: 430.85, y: 138.6), controlPoint2: CGPoint(x: 385.57, y: 94))
        clipPath.addCurve(to: CGPoint(x: 255.34, y: 131.08), controlPoint1: CGPoint(x: 295.84, y: 94), controlPoint2: CGPoint(x: 270.55, y: 108.87))
        clipPath.addCurve(to: CGPoint(x: 181.68, y: 94), controlPoint1: CGPoint(x: 240.47, y: 109.04), controlPoint2: CGPoint(x: 214.84, y: 94))
        clipPath.addCurve(to: CGPoint(x: 80, y: 203.55), controlPoint1: CGPoint(x: 125.12, y: 94), controlPoint2: CGPoint(x: 80, y: 138.6))
        clipPath.addCurve(to: CGPoint(x: 236.2, y: 410.85), controlPoint1: CGPoint(x: 80, y: 276.86), controlPoint2: CGPoint(x: 141.52, y: 349.32))
        clipPath.addCurve(to: CGPoint(x: 255.34, y: 419.22), controlPoint1: CGPoint(x: 242.7, y: 415.12), controlPoint2: CGPoint(x: 250.39, y: 419.22))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 255.34, y: 375.64))
        clipPath.addCurve(to: CGPoint(x: 252.44, y: 374.27), controlPoint1: CGPoint(x: 254.83, y: 375.64), controlPoint2: CGPoint(x: 253.8, y: 375.13))
        clipPath.addCurve(to: CGPoint(x: 121.02, y: 203.38), controlPoint1: CGPoint(x: 179.98, y: 325.91), controlPoint2: CGPoint(x: 121.02, y: 260.8))
        clipPath.addCurve(to: CGPoint(x: 185.62, y: 133.82), controlPoint1: CGPoint(x: 121.02, y: 162.02), controlPoint2: CGPoint(x: 148.7, y: 133.82))
        clipPath.addCurve(to: CGPoint(x: 242.18, y: 166.97), controlPoint1: CGPoint(x: 215.18, y: 133.82), controlPoint2: CGPoint(x: 231.59, y: 151.25))
        clipPath.addCurve(to: CGPoint(x: 255.34, y: 176.54), controlPoint1: CGPoint(x: 246.97, y: 173.81), controlPoint2: CGPoint(x: 250.56, y: 176.54))
        clipPath.addCurve(to: CGPoint(x: 268.5, y: 166.97), controlPoint1: CGPoint(x: 260.3, y: 176.54), controlPoint2: CGPoint(x: 263.54, y: 173.81))
        clipPath.addCurve(to: CGPoint(x: 325.24, y: 133.82), controlPoint1: CGPoint(x: 279.78, y: 151.42), controlPoint2: CGPoint(x: 295.67, y: 133.82))
        clipPath.addCurve(to: CGPoint(x: 389.84, y: 203.38), controlPoint1: CGPoint(x: 362.15, y: 133.82), controlPoint2: CGPoint(x: 389.84, y: 162.02))
        clipPath.addCurve(to: CGPoint(x: 258.42, y: 374.27), controlPoint1: CGPoint(x: 389.84, y: 260.8), controlPoint2: CGPoint(x: 330.88, y: 325.91))
        clipPath.addCurve(to: CGPoint(x: 255.34, y: 375.64), controlPoint1: CGPoint(x: 257.05, y: 375.13), controlPoint2: CGPoint(x: 256.03, y: 375.64))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 255.34, y: 419.22))
        bezier2Path.addCurve(to: CGPoint(x: 274.65, y: 410.85), controlPoint1: CGPoint(x: 260.47, y: 419.22), controlPoint2: CGPoint(x: 267.99, y: 415.12))
        bezier2Path.addCurve(to: CGPoint(x: 430.85, y: 203.55), controlPoint1: CGPoint(x: 369.33, y: 349.32), controlPoint2: CGPoint(x: 430.85, y: 276.86))
        bezier2Path.addCurve(to: CGPoint(x: 329.17, y: 94), controlPoint1: CGPoint(x: 430.85, y: 138.6), controlPoint2: CGPoint(x: 385.57, y: 94))
        bezier2Path.addCurve(to: CGPoint(x: 255.34, y: 131.08), controlPoint1: CGPoint(x: 295.84, y: 94), controlPoint2: CGPoint(x: 270.55, y: 108.87))
        bezier2Path.addCurve(to: CGPoint(x: 181.68, y: 94), controlPoint1: CGPoint(x: 240.47, y: 109.04), controlPoint2: CGPoint(x: 214.84, y: 94))
        bezier2Path.addCurve(to: CGPoint(x: 80, y: 203.55), controlPoint1: CGPoint(x: 125.12, y: 94), controlPoint2: CGPoint(x: 80, y: 138.6))
        bezier2Path.addCurve(to: CGPoint(x: 236.2, y: 410.85), controlPoint1: CGPoint(x: 80, y: 276.86), controlPoint2: CGPoint(x: 141.52, y: 349.32))
        bezier2Path.addCurve(to: CGPoint(x: 255.34, y: 419.22), controlPoint1: CGPoint(x: 242.7, y: 415.12), controlPoint2: CGPoint(x: 250.39, y: 419.22))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 255.34, y: 375.64))
        bezier2Path.addCurve(to: CGPoint(x: 252.44, y: 374.27), controlPoint1: CGPoint(x: 254.83, y: 375.64), controlPoint2: CGPoint(x: 253.8, y: 375.13))
        bezier2Path.addCurve(to: CGPoint(x: 121.02, y: 203.38), controlPoint1: CGPoint(x: 179.98, y: 325.91), controlPoint2: CGPoint(x: 121.02, y: 260.8))
        bezier2Path.addCurve(to: CGPoint(x: 185.62, y: 133.82), controlPoint1: CGPoint(x: 121.02, y: 162.02), controlPoint2: CGPoint(x: 148.7, y: 133.82))
        bezier2Path.addCurve(to: CGPoint(x: 242.18, y: 166.97), controlPoint1: CGPoint(x: 215.18, y: 133.82), controlPoint2: CGPoint(x: 231.59, y: 151.25))
        bezier2Path.addCurve(to: CGPoint(x: 255.34, y: 176.54), controlPoint1: CGPoint(x: 246.97, y: 173.81), controlPoint2: CGPoint(x: 250.56, y: 176.54))
        bezier2Path.addCurve(to: CGPoint(x: 268.5, y: 166.97), controlPoint1: CGPoint(x: 260.3, y: 176.54), controlPoint2: CGPoint(x: 263.54, y: 173.81))
        bezier2Path.addCurve(to: CGPoint(x: 325.24, y: 133.82), controlPoint1: CGPoint(x: 279.78, y: 151.42), controlPoint2: CGPoint(x: 295.67, y: 133.82))
        bezier2Path.addCurve(to: CGPoint(x: 389.84, y: 203.38), controlPoint1: CGPoint(x: 362.15, y: 133.82), controlPoint2: CGPoint(x: 389.84, y: 162.02))
        bezier2Path.addCurve(to: CGPoint(x: 258.42, y: 374.27), controlPoint1: CGPoint(x: 389.84, y: 260.8), controlPoint2: CGPoint(x: 330.88, y: 325.91))
        bezier2Path.addCurve(to: CGPoint(x: 255.34, y: 375.64), controlPoint1: CGPoint(x: 257.05, y: 375.13), controlPoint2: CGPoint(x: 256.03, y: 375.64))
        bezier2Path.close()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 0
        bezier2Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfShare: UIImage {
        if Cache.imageOfShare != nil {
            return Cache.imageOfShare!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            StyleKitName.drawShare()

        Cache.imageOfShare = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShare!
    }

    @objc dynamic public class var imageOfDelete: UIImage {
        if Cache.imageOfDelete != nil {
            return Cache.imageOfDelete!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            StyleKitName.drawDelete()

        Cache.imageOfDelete = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDelete!
    }

    @objc dynamic public class var imageOfFind: UIImage {
        if Cache.imageOfFind != nil {
            return Cache.imageOfFind!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            StyleKitName.drawFind()

        Cache.imageOfFind = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFind!
    }

    @objc dynamic public class var imageOfHeartFill: UIImage {
        if Cache.imageOfHeartFill != nil {
            return Cache.imageOfHeartFill!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            StyleKitName.drawHeartFill()

        Cache.imageOfHeartFill = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHeartFill!
    }

    @objc dynamic public class var imageOfHeart: UIImage {
        if Cache.imageOfHeart != nil {
            return Cache.imageOfHeart!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            StyleKitName.drawHeart()

        Cache.imageOfHeart = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHeart!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var shareTargets: [AnyObject]! {
        get { return Cache.shareTargets }
        set {
            Cache.shareTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfShare)
            }
        }
    }

    @objc @IBOutlet dynamic var deleteTargets: [AnyObject]! {
        get { return Cache.deleteTargets }
        set {
            Cache.deleteTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfDelete)
            }
        }
    }

    @objc @IBOutlet dynamic var findTargets: [AnyObject]! {
        get { return Cache.findTargets }
        set {
            Cache.findTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfFind)
            }
        }
    }

    @objc @IBOutlet dynamic var heartFillTargets: [AnyObject]! {
        get { return Cache.heartFillTargets }
        set {
            Cache.heartFillTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfHeartFill)
            }
        }
    }

    @objc @IBOutlet dynamic var heartTargets: [AnyObject]! {
        get { return Cache.heartTargets }
        set {
            Cache.heartTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKitName.imageOfHeart)
            }
        }
    }




    @objc(StyleKitNameResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
